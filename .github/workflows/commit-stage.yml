name: Commit Stage
on: push # 새 코드를 저장소로 푸쉬하면 워크플로를 시작한다.

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04 # 깃허브가 제겅하는 우분투 러너에서 실행
    permissions: # 작업에 부여된 권한
      contents: read
      security-events: write # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4 # 현재 깃 저장소를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v4 # 자바 런타임을 설치하고 설정한다.
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
#      - name: Code vulnerability scanning
#        uses: anchore/scan-action@v3 # 그라이프를 사용해 취약성을 스캔한다.
#        id: scan # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고할 수 있다.
#        with:
#          path: "{{ github.workspace }}" # 체크아웃 저장소 패스
#          fail-build: false # 보안 취약성 발견 시 빌드 실패 여부
#          severity-cutoff: high # 오류로 간주할 최소 수준의 보안 유형
#          acs-report-enable: true # 스캔이 완료된 이후에 리포트를 생성할지 여부
#      - name: Upload vulnerability report
#        uses: github/codeql-action/upload-sarif@v3 # 깃허브로 보안 취약성 리포트 (SARIF 형식) 전송
#        if: success() || failure() # 이전 단계가 실패하더라도 리포트 전송
#        with:
#          sarif_file: ${{ steps.scan.outputs.sarif }} # 이전 단계 결과의 리포트를 가져온다.
      - name: Build, unit tests and integration tests
        # 윈도우 호환성을 해결하면서 그래들 래퍼스크립트를 실행 가능하게 만든다.
        # 코드베이스를 컴파일하고 단위 및 통합 테스트를 실행하는 그래들 빌드 작업을 수행한다.
        run: |
          chmod +x gradlew
          ./gradlew build
        # 깃 배포 성공을 위한 임시 설정 시작
        env:
          SPRING_CLOUD_CONFIG_ENABLED: false
        # 깃 배포 성공을 위한 임시 설정 끝