plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
//	id 'org.springframework.boot' version '2.7.18'
//	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

// 공통 속성이나 변수를 설정
ext {
//	set('springCloudVersion', "2023.0.3") // 사용할 스프링 클라우드 버전 정의
	set('springCloudVersion', "2022.0.4")
	set('testcontainersVersion', "1.19.8") // 사용할 테스트컨테이너 버전을 지정
	set('testKeycloakVersion', "2.3.0")
	set('otelVersion', "1.17.0")
}

// 프로젝트를 빌드할 때 그래들이 설정 프로세서를 사용하도록 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

group = 'com.polarbookshop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

// profile로 testdata를 추가해 demo.BookDataLoader가 실행될 수 있게 설정
// 인텔리제이에서 어플리케이션을 실행하면 안되고 ./gradlew bootRun 명령어를 사용해야 함
bootRun {
	systemProperty 'spring.profiles.active', 'testdata'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'

	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	// 애플리케이션의 재시도 구현 라이브러리
	implementation 'org.springframework.retry:spring-retry'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.projectlombok:lombok:1.18.22'
	// 플라이웨이 의존성 추가 시작
	implementation 'org.flywaydb:flyway-core'
	// 플라이웨이 의존성 추가 끝

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// PostgreSQL 데이터베이스를 Docker 컨테이너로 손쉽게 실행할 수 있게 함
	testImplementation 'org.testcontainers:postgresql'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "com.github.dasniko:testcontainers-keycloak:${testKeycloakVersion}" // 테스트 컨테이너에 기반한 키클록 테스트 유틸리티 제공
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
	// 마이크로미터 프로메테우스 의존성 추가
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

tasks.named('test') {
	useJUnitPlatform()
}

// 스프링 부트에서 제공하는 빌드팩을 이용해 이미지 만드는 플러그인 설정 시작
bootBuildImage {
	imageName = "${project.name}" // 그래들의 프로젝트 설정에서 정의한 이름과 같음. 버전 번호를 사용하지 않고 암묵적인 latest 태그를 사용한다.
	environment = ["BP_JVM_VERSION": "17.*"] // 이미지에 설치할 JVM 버전

	// 컨테이너 저장소 인증을 설정하기 위한 섹션. 값은 그래들 속성을 통해 전달됨
	docker {
		publishRegistry {
			username = project.findProperty("registryUsername")
			password = project.findProperty("registryToken")
			url = project.findProperty("registryUrl")
		}
	}
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}" // 테스트컨테이너 의존성 관리를 위한 BOM
	}
}