server:
  port: 9001
  shutdown: graceful
  tomcat:
    connection-timeout: 2s
    keep-alive-timeout: 15s
    threads:
      max: 50
      min-spare: 5

spring:
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri:
            http://localhost:8080/realms/PolarBookshop
  application:
    name: catalog-service # 설정 서버에서 설정을 필터링하는데 사용다는 애플리케이션 이름
  lifecycle:
    timeout-per-shutdown-phase: 15s # 우아한 종료 시 15초의 종료 기간을 둠
  config:
#    import: "optional:configserver:" # 가능하면 configserver에서 설정 데이터를 가져온다
    import: "" # 가능하면 configserver에서 설정 데이터를 가져온다
  cloud:
    config:
      enabled: false # 스프링 클라우드 컨피그 비활성화
      uri: http://localhost:8888 # 설정 서버의 URL
      request-connect-timeout: 5000 # 설정 서버에 연결될 때까지 기다리는 시간 (밀리초)
      request-read-timeout: 5000 # 설정 서버에서 설정 데이터를 읽을 때까지 기다리는 시간(밀리초)
      fail-fast: false # true -> 설정 서버에 연결할 수 없는 경우 애플리케이션 즉시 실패, false -> 연결 못해도 정상 작동
      retry:
        max-attempts: 6 # 시도의 최대 횟수
        initial-interval: 1000 # 최초 재시도 지연 시간(밀리초)
        max-interval: 2000 # 재시도 지연 최대 시간(밀리초)
        multiplier: 1.1 # 지연시간 계산 승수
  datasource:
    username: user
    password: password
    # localhost를 가리키기 때문에 컨테이너 내에서 작동하지 않음.
    url: jdbc:postgresql://localhost:5432/polardb_catalog
    hikari:
        connection-timeout: 2000
        maximum-pool-size: 5

logging:
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}"

polar:
  greeting: Welcome to the local book catalog!

management:
  endpoints:
    web:
      exposure:
#        include: configprops, env, flyway, health, heapdump, info, loggers, mappings, prometheus
        include: health, prometheus
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
#  info:
#    env:
#      enabled: true
#    java:
#      enabled: true
#    os:
#      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}